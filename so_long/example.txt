• The map has to be constructed with 3 components: walls, collectibles, and free
space.
• The map can be composed of only these 5 characters: 0 for an empty space,
1 for a wall,
C for a collectible,
E for a map exit,
P for the player’s starting position.

1111111111111
10010000000C1
1000011111001
1P0011E000001
1111111111111

• The map must contain 1 exit, at least 1 collectible, and 1 starting position to be valid.


typedef struct	s_point
{
	int			x;
	int			y;
}				t_point;

void	fill(char **tab, t_point size, t_point cur, char to_fill)
{
	if (cur.y < 0 || cur.y >= size.y || cur.x < 0 || cur.x >= size.x
		|| tab[cur.y][cur.x] != to_fill)
		return;

	tab[cur.y][cur.x] = 'F';
	fill(tab, size, (t_point){cur.x - 1, cur.y}, to_fill);
	fill(tab, size, (t_point){cur.x + 1, cur.y}, to_fill);
	fill(tab, size, (t_point){cur.x, cur.y - 1}, to_fill);
	fill(tab, size, (t_point){cur.x, cur.y + 1}, to_fill);
}

void	flood_fill(char **tab, t_point size, t_point begin)
{
	fill(tab, size, begin, tab[begin.y][begin.x]);
}

void	print_count(t_game *counter, int number)
{
	char	*str;
	char	*itoa;

	itoa = NULL;
	str = NULL;
	mlx_delete_image(counter->mlx, counter->put);
	itoa = ft_itoa(number / 2);
	str = ft_s("Move : ", itoa);
	counter->put = mlx_put_string(counter->mlx, str, 25, 20);
	counter->move++;
	free(itoa);
	free(str);